;======================GAME DESCRIPTION=========================================
;—тиль игры - Hero Fighting с элементами прокачки геро€
;¬ игре присутствует некое разнообразие характеристик:
;	—ила атаки(Atack)	- вли€ет на силу удара геро€
;	Ћовкость(Dexterity)	- вли€ет на веро€тность уклонени€ от удара врага
;	«ащита(Defence)		- вли€ет на поглощение части удара от врага
;	¬ыносливость(Stamina)	- вли€ет на количество здоровь€
;	“очность(Accuracy)	- вли€ет на шанс нанести удвоенный урон
;ѕо началу каждый бой будет проходить с полным кол-вом здоровь€ у всех
;“ак же ваш герой будет ходить всегда первым(возможно потом это изменитс€)
;
;ѕри повышении уровн€ даетс€ несколько очков, которые можно вложить по своему
;усмотрению в любую из характеристик
;
; оличество опыта требуемое дл€ каждого следующего уровн€ выше и выше
;„ем слабее противник, тем меньше опыта получает ваш герой
;
; оличество здоровь€ напр€мую зависит от количества ¬ыносливости
;1 ед. ¬ыносливости = 10 ед. здоровь€
;” Ћовкости и “очности зависимость пр€мопропорциональна
;количеству единиц вложенных в эти характеристики
;
; оличество урона которое вы могли бы нанести противнику равн€етс€
;количеству единиц —илы атаки, однако стоит помнить, что чистый урон
;будет только после отражени€ частью вашего урона броней противника
;
;«ащита позвол€ет получать не весь урон, наносимый противником
; оличество вход€щего урона = сила атаки противника - ваша защита
;Ќќ!!!  оличество вход€щего урона не может быть меньше 5-ти единиц
;исключа€ случаи промахов. ”двоение урона происходит ƒќ порезки бронЄй
;======================EXTERNS==================================================
extern	__imp__GetStdHandle@4
extern	__imp__SetConsoleMode@8

extern	__imp__SetConsoleCursorPosition@8
extern	__imp__WriteConsoleA@20
extern	__imp__wsprintfA

extern	__imp__Sleep@4
extern	__imp__GetAsyncKeyState@4

extern	__imp__ExitProcess@4
;=======================SECTION BSS=============================================
section .bss
	written		resb 1							;number of chars written after WriteConsoleA
	buffer		resb 255
	stdin		resd 1							;STD_INPUT_HANDLE
	stdout		resd 1							;STD_OUTPUT_HANDLE
	console_coord	resd 1							;coord for cursor

	cur_lvl		resd 1
	cur_exp		resd 1
	mb_exp		resd 1
	need_exp_to_lvl	resd 1

	stat_atk	resd 1
	stat_dex	resd 1
	stat_def	resd 1
	stat_sta	resd 1
	stat_acc	resd 1

	e_stat_atk	resd 1
	e_stat_dex	resd 1
	e_stat_def	resd 1
	e_stat_sta	resd 1
	e_stat_acc	resd 1

	fight_lvl	resd 1

	h_cur_health	resd 1
	e_cur_health	resd 1
;=======================MAIN CODE SECTION=======================================
section .text
	global	_main
;-------------------------------------------------------------------------------
_main:
	call	init_stdin_stdout
	call	set_startup_features
	call	set_enemy_startup_features
	call	init_main_window
	jmp	main_window_loop
;-------------------------------------------------------------------------------
init_stdin_stdout:

	push dword -10
	call [__imp__GetStdHandle@4]
	mov [stdin], eax

	push dword 8h
	push dword [stdin]
	call [__imp__SetConsoleMode@8]

	push dword -11
	call [__imp__GetStdHandle@4]
	mov [stdout], eax

	ret
;-------------------------------------------------------------------------------
start_battle:
	call	set_enemy_setting

	mov	ecx, [stat_sta]
	imul	ecx, 10
	mov	[h_cur_health], ecx

	mov	ecx, [e_stat_sta]
	imul	ecx, 10
	mov	[e_cur_health], ecx
	
	call	h_healthbar
	call	e_healthbar

	push	500
	call	[__imp__Sleep@4]

	fight_main_loop:
;HERO ATTACK
	xor	ax, ax
	add	ax, 15
	xor	cx, cx
	add	cx, 5
	call	move_cursor

	push	battle_line_5
	call	add_string_to_buffer
	mov	eax, 5
	call	print_line

	call	rand_percent
	mov	eax, [e_stat_dex]
	cmp	edx, eax
	 jl	enemy_dodged

	call	rand_percent
	mov	eax, [stat_atk]
	mov	esi, [stat_acc]
	cmp	edx, esi
	 jge	hero_dmg_normal
	imul	eax, 2
	pushad
	xor	ax, ax
	add	ax, 15
	xor	cx, cx
	add	cx, 5
	call	move_cursor
	push	battle_line_1
	call	add_string_to_buffer
	mov	eax, 5
	call	print_line
	popad
	hero_dmg_normal:
	mov	ebx, [e_stat_def]
	sub	eax, ebx
	cmp	eax, 1
	 jg	h_dmg_grower_than_2
	mov	eax, 2
	h_dmg_grower_than_2:
	mov	ebx, [e_cur_health]
	sub	ebx, eax
	mov	[e_cur_health], ebx

	cmp	ebx, 1
	 jl	fight_win

	jmp	enemy_not_dodged
	enemy_dodged:
	xor	ax, ax
	add	ax, 15
	xor	cx, cx
	add	cx, 5
	call	move_cursor

	push	battle_line_4
	call	add_string_to_buffer
	mov	eax, 5
	call	print_line

	enemy_not_dodged:
	call	e_healthbar

	push	200
	call	[__imp__Sleep@4]


;ENEMY_ATACK
	xor	ax, ax
	add	ax, 15
	xor	cx, cx
	add	cx, 3
	call	move_cursor

	push	battle_line_5
	call	add_string_to_buffer
	mov	eax, 5
	call	print_line

	call	rand_percent
	mov	eax, [stat_dex]
	cmp	edx, eax
	 jl	hero_dodged

	call	rand_percent
	mov	eax, [e_stat_atk]
	mov	esi, [e_stat_acc]
	cmp	edx, esi
	 jge	enemy_dmg_normal
	imul	eax, 2
	pushad
	xor	ax, ax
	add	ax, 15
	xor	cx, cx
	add	cx, 3
	call	move_cursor
	push	battle_line_3
	call	add_string_to_buffer
	mov	eax, 5
	call	print_line
	popad
	enemy_dmg_normal:
	mov	ebx, [stat_def]
	sub	eax, ebx
	cmp	eax, 1
	 jg	e_dmg_grower_than_2
	mov	eax, 2
	e_dmg_grower_than_2:
	mov	ebx, [h_cur_health]
	sub	ebx, eax
	mov	[h_cur_health], ebx

	cmp	ebx, 1
	 jl	game_over

	jmp	hero_not_dodged
	hero_dodged:
	xor	ax, ax
	add	ax, 15
	xor	cx, cx
	add	cx, 3
	call	move_cursor

	push	battle_line_2
	call	add_string_to_buffer
	mov	eax, 5
	call	print_line

	hero_not_dodged:
	call	h_healthbar

	push	200
	call	[__imp__Sleep@4]

	push	51h								;compare on press Quit/Retreat
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	retreat

	jmp	fight_main_loop
;-------------------------------------------------------------------------------
retreat:
	call	battle_over_clrscr
	call	init_main_window
	jmp	main_window_loop
;-------------------------------------------------------------------------------
fight_win:
	call	battle_over_clrscr
	mov	eax, [cur_exp]
	mov	ebx, [mb_exp]
	add	eax, ebx
	mov	[cur_exp], eax
	mov	ebx, [need_exp_to_lvl]
	cmp	eax, ebx
	 jl	fight_to_main
	imul	ebx, 4
	mov	[need_exp_to_lvl], ebx
	mov	ebx, [cur_lvl]
	add	ebx, 1
	mov	[cur_lvl], ebx
	jmp	level_up

fight_to_main:
	call	init_main_window
	jmp	main_window_loop
;-------------------------------------------------------------------------------
level_up:
	xor	ax, ax
	add	ax, 0
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	xor	eax, eax
	add	eax, 42
	push	lvl_up_line_1
	call	add_string_to_buffer
	call	print_line
	call	print_end_line

	xor	eax, eax
	add	eax, 42
	push	lvl_up_line_2
	call	add_string_to_buffer
	call	print_line
	call	print_end_line

	mov	eax, [stat_atk]
	add	eax, 1
	mov	[stat_atk], eax
	mov	eax, [stat_dex]
	add	eax, 1
	mov	[stat_dex], eax
	mov	eax, [stat_def]
	add	eax, 1
	mov	[stat_def], eax
	mov	eax, [stat_sta]
	add	eax, 1
	mov	[stat_sta], eax
	mov	eax, [stat_acc]
	add	eax, 1
	mov	[stat_acc], eax

wait_for_level_up:
	push	31h								;compare on press 1
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	lvl_up_on_1
	push	32h								;compare on press 2
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	lvl_up_on_2
	push	33h								;compare on press 3
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	lvl_up_on_3
	push	34h								;compare on press 4
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	lvl_up_on_4
	push	35h								;compare on press 5
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	lvl_up_on_5
jmp	wait_for_level_up

;1)Atack 2)Defence 3)Stamina 4)Accur 5)Dext
lvl_up_on_1:
	mov	eax, [stat_atk]
	add	eax, 5
	mov	[stat_atk], eax
jmp	lvl_up_end
lvl_up_on_2:
	mov	eax, [stat_def]
	add	eax, 5
	mov	[stat_def], eax
jmp	lvl_up_end
lvl_up_on_3:
	mov	eax, [stat_sta]
	add	eax, 5
	mov	[stat_sta], eax
jmp	lvl_up_end
lvl_up_on_4:
	mov	eax, [stat_acc]
	add	eax, 5
	mov	[stat_acc], eax
jmp	lvl_up_end
lvl_up_on_5:
	mov	eax, [stat_dex]
	add	eax, 5
	mov	[stat_dex], eax
jmp	lvl_up_end

lvl_up_end:
	call	init_main_window
	jmp	main_window_loop
;-------------------------------------------------------------------------------
game_over:
	call	battle_over_clrscr

	xor	ax, ax
	add	ax, 0
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	xor	eax, eax
	add	eax, 31
	push	game_over_line_1
	call	add_string_to_buffer
	call	print_line
	call	print_end_line

	xor	eax, eax
	add	eax, 29
	push	game_over_line_2
	call	add_string_to_buffer
	call	print_line

game_over_loop:
	push	1Bh
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	exit
jmp	game_over_loop
;-------------------------------------------------------------------------------
battle_over_clrscr:
	xor	ax, ax
	add	ax, 0
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	xor	ecx, ecx
	clean_screen:
	pushad
	xor	eax, eax
	add	eax, 39
	push	empty_line_39
	call	add_string_to_buffer
	call	print_line
	xor	eax, eax
	add	eax, 39
	push	empty_line_39
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	popad
	add	ecx, 1
	cmp	ecx, 24
	 jl	clean_screen
ret
;-------------------------------------------------------------------------------
set_enemy_setting:
	mov	eax, [fight_lvl]

	cmp	eax, 1
	 je	set_lvl_1
	cmp	eax, 2
	 je	set_lvl_2
	cmp	eax, 3
	 je	set_lvl_3
	cmp	eax, 4
	 je	set_lvl_4
	cmp	eax, 5
	 je	set_lvl_5
	cmp	eax, 6
	 je	set_lvl_6
	cmp	eax, 7
	 je	set_lvl_7
	cmp	eax, 8
	 je	set_lvl_8
	cmp	eax, 9
	 je	set_lvl_9

;	set_lvl_boss:			;--------------------------------BOSS---<<<<<<<<<<<<<<
	mov	ax, 50			;50
	mov	[e_stat_acc], ax
	mov	[e_stat_dex], ax
	mov	[e_stat_atk], ax
	mov	[e_stat_def], ax
	add	ax, 49			;99
	mov	[e_stat_sta], ax
	jmp	end_set_lvl
	set_lvl_1:			;--------------------------------1-st---<<<<<<<<<<<<<<
	mov	ax, 2			;2
	mov	[mb_exp], ax
	mov	[e_stat_dex], ax
	mov	[e_stat_acc], ax
	add	ax, 5			;7
	mov	[e_stat_atk], ax
	mov	[e_stat_def], ax
	add	ax, 3			;10
	mov	[e_stat_sta], ax
	jmp	end_set_lvl
	set_lvl_2:			;--------------------------------2-nd---<<<<<<<<<<<<<<
	mov	ax, 5			;5
	mov	[e_stat_dex], ax
	mov	[e_stat_acc], ax
	add	ax, 3			;8
	mov	[e_stat_sta], ax
	mov	[e_stat_def], ax
	add	ax, 5			;13
	mov	[mb_exp], ax
	mov	[e_stat_atk], ax
	jmp	end_set_lvl
	set_lvl_3:			;--------------------------------3-rd---<<<<<<<<<<<<<<
	xor	ax, ax			;0
	mov	[e_stat_dex], ax
	mov	[e_stat_acc], ax
	mov	[e_stat_def], ax
	add	ax, 19			;19
	mov	[e_stat_atk], ax
	add	ax, 19			;38
	mov	[e_stat_sta], ax
	add	ax, 22			;60
	mov	[mb_exp], ax
	jmp	end_set_lvl
	set_lvl_4:			;--------------------------------4-th---<<<<<<<<<<<<<<
	xor	ax, ax			;0
	mov	[e_stat_acc], ax
	mov	[e_stat_atk], ax
	add	ax, 15			;15
	mov	[e_stat_def], ax
	mov	[e_stat_sta], ax
	add	ax, 65			;80
	mov	[e_stat_dex], ax
	add	ax, 120			;200
	mov	[mb_exp], ax
	jmp	end_set_lvl
	set_lvl_5:			;--------------------------------5-th---<<<<<<<<<<<<<<
	mov	ax, 10			;10
	mov	[e_stat_dex], ax
	mov	[e_stat_acc], ax
	add	ax, 10			;20
	mov	[e_stat_atk], ax
	mov	[e_stat_def], ax
	add	ax, 10			;30
	mov	[e_stat_sta], ax
	add	ax, 770			;800
	mov	[mb_exp], ax
	jmp	end_set_lvl
	set_lvl_6:			;--------------------------------6-th---<<<<<<<<<<<<<<
	;bla-bla
	jmp	end_set_lvl
	set_lvl_7:			;--------------------------------7-th---<<<<<<<<<<<<<<
	;bla-bla
	jmp	end_set_lvl
	set_lvl_8:			;--------------------------------8-th---<<<<<<<<<<<<<<
	;bla-bla
	jmp	end_set_lvl
	set_lvl_9:			;--------------------------------9-th---<<<<<<<<<<<<<<
	;bla-bla

	end_set_lvl:
	ret
;-------------------------------------------------------------------------------
h_healthbar:
	xor	ax, ax
	add	ax, 20
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	mov	eax, 9
	push	empty_line_9
	call	add_string_to_buffer
	call	print_line

	xor	ax, ax
	add	ax, 20
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	mov	eax, 3
	mov	ecx, [h_cur_health]
	push	ecx
	call	add_num_to_buffer
	call	print_line

	xor	ax, ax
	add	ax, 23
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	mov	eax, 1
	push	slash
	call	add_string_to_buffer
	call	print_line

	mov	eax, 3
	mov	ecx, [stat_sta]
	imul	ecx, 10
	push	ecx
	call	add_num_to_buffer
	call	print_line
	ret
;-------------------------------------------------------------------------------
e_healthbar:
	xor	ax, ax
	add	ax, 42
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	mov	eax, 9
	push	empty_line_9
	call	add_string_to_buffer
	call	print_line

	xor	ax, ax
	add	ax, 42
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	mov	eax, 3
	mov	ecx, [e_cur_health]
	push	ecx
	call	add_num_to_buffer
	call	print_line

	xor	ax, ax
	add	ax, 45
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	mov	eax, 1
	push	slash
	call	add_string_to_buffer
	call	print_line

	mov	eax, 3
	mov	ecx, [e_stat_sta]
	imul	ecx, 10
	push	ecx
	call	add_num_to_buffer
	call	print_line
	ret
;-------------------------------------------------------------------------------
set_startup_features:
	xor	ax, ax
	mov	[cur_exp], ax
	mov	[stat_acc], ax
	mov	[stat_dex], ax
	add	ax, 1
	mov	[cur_lvl], ax
	add	ax, 1
	mov	[need_exp_to_lvl], ax
	add	ax, 8
	mov	[stat_sta], ax
	mov	[stat_atk], ax
	mov	[stat_def], ax
	ret
;-------------------------------------------------------------------------------
set_enemy_startup_features:
	xor	ax, ax
	add	ax, 2
	mov	[e_stat_acc], ax
	mov	[e_stat_dex], ax
	add	ax, 2
	mov	[e_stat_atk], ax
	mov	[e_stat_def], ax
	add	ax, 1
	mov	[e_stat_sta], ax
	ret
;-------------------------------------------------------------------------------
main_window_loop:
	push	10
	call	[__imp__Sleep@4]
	xor	eax, eax

	push	46h								;compare on press Fight
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode

	push	53h								;compare on press Stat
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	stat_window_init

	push	45h								;compare on press Exit
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	exit

	push	48h								;compare on press HELP
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	help_window_init

jmp	main_window_loop
;-------------------------------------------------------------------------------
fight_mode:
	call	print_fight_mode

	fight_mode_loop:
	push	10
	call	[__imp__Sleep@4]
	xor	eax, eax

	push	1Bh								;compare on press Esc
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_exit

	push	31h								;compare on press 1
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_on_1
	push	32h								;compare on press 2
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_on_2
	push	33h								;compare on press 3
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_on_3
	push	34h								;compare on press 4
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_on_4
	push	35h								;compare on press 5
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_on_5
	push	36h								;compare on press 6
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_on_6
	push	37h								;compare on press 7
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_on_7
	push	38h								;compare on press 8
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_on_8
	push	39h								;compare on press 9
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_on_9
	push	30h								;compare on press 0
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	fight_mode_on_10

	jmp	fight_mode_loop
fight_mode_exit:
	call	init_main_window
	jmp	main_window_loop

fight_mode_on_1:
	mov	esi, 1
	jmp	init_fight_field
fight_mode_on_2:
	mov	esi, 2
	jmp	init_fight_field
fight_mode_on_3:
	mov	esi, 3
	jmp	init_fight_field
fight_mode_on_4:
	mov	esi, 4
	jmp	init_fight_field
fight_mode_on_5:
	mov	esi, 5
	jmp	init_fight_field
fight_mode_on_6:
	mov	esi, 6
	jmp	init_fight_field
fight_mode_on_7:
	mov	esi, 7
	jmp	init_fight_field
fight_mode_on_8:
	mov	esi, 8
	jmp	init_fight_field
fight_mode_on_9:
	mov	esi, 9
	jmp	init_fight_field
fight_mode_on_10:
	mov	esi, 10
	jmp	init_fight_field
;-------------------------------------------------------------------------------
init_fight_field
	mov	[fight_lvl], esi

	xor	ax, ax
	add	ax, 0
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	xor	ecx, ecx
	add	ecx, 1
	init_fight_field_loop:
	;-----------------------------------------------------------------------
	cmp	ecx, 1
	 je	print_hero_line_01
	cmp	ecx, 2
	 je	print_hero_line_02
	cmp	ecx, 3
	 je	print_hero_line_03
	cmp	ecx, 4
	 je	print_hero_line_04
	cmp	ecx, 5
	 je	print_hero_line_05
	cmp	ecx, 6
	 je	print_hero_line_06
	cmp	ecx, 7
	 je	print_hero_line_07
	cmp	ecx, 8
	 je	print_hero_line_08
	cmp	ecx, 9
	 je	print_hero_line_09
	cmp	ecx, 10
	 je	print_hero_line_10
	cmp	ecx, 11
	 je	print_hero_line_11
	cmp	ecx, 12
	 je	print_hero_line_12
	cmp	ecx, 13
	 je	print_hero_line_13
	cmp	ecx, 14
	 je	print_hero_line_14
	cmp	ecx, 15
	 je	print_hero_line_15
	cmp	ecx, 16
	 je	print_hero_line_16
	cmp	ecx, 17
	 je	print_hero_line_17
	cmp	ecx, 18
	 je	print_hero_line_18
	cmp	ecx, 19
	 je	print_hero_line_19
	cmp	ecx, 20
	 je	print_hero_line_20
	cmp	ecx, 21
	 je	print_hero_line_21
	cmp	ecx, 22
	 je	print_hero_line_22
	cmp	ecx, 23
	 je	print_hero_line_23
	cmp	ecx, 24
	 je	print_hero_line_24

	print_hero_line_01:
	push	hero_line_01
	jmp	end_print_hero_line
	print_hero_line_02:
	push	hero_line_02
	jmp	end_print_hero_line
	print_hero_line_03:
	push	hero_line_03
	jmp	end_print_hero_line
	print_hero_line_04:
	push	hero_line_04
	jmp	end_print_hero_line
	print_hero_line_05:
	push	hero_line_05
	jmp	end_print_hero_line
	print_hero_line_06:
	push	hero_line_06
	jmp	end_print_hero_line
	print_hero_line_07:
	push	hero_line_07
	jmp	end_print_hero_line
	print_hero_line_08:
	push	hero_line_08
	jmp	end_print_hero_line
	print_hero_line_09:
	push	hero_line_09
	jmp	end_print_hero_line
	print_hero_line_10:
	push	hero_line_10
	jmp	end_print_hero_line
	print_hero_line_11:
	push	hero_line_11
	jmp	end_print_hero_line
	print_hero_line_12:
	push	hero_line_12
	jmp	end_print_hero_line
	print_hero_line_13:
	push	hero_line_13
	jmp	end_print_hero_line
	print_hero_line_14:
	push	hero_line_14
	jmp	end_print_hero_line
	print_hero_line_15:
	push	hero_line_15
	jmp	end_print_hero_line
	print_hero_line_16:
	push	hero_line_16
	jmp	end_print_hero_line
	print_hero_line_17:
	push	hero_line_17
	jmp	end_print_hero_line
	print_hero_line_18:
	push	hero_line_18
	jmp	end_print_hero_line
	print_hero_line_19:
	push	hero_line_19
	jmp	end_print_hero_line
	print_hero_line_20:
	push	hero_line_20
	jmp	end_print_hero_line
	print_hero_line_21:
	push	hero_line_21
	jmp	end_print_hero_line
	print_hero_line_22:
	push	hero_line_22
	jmp	end_print_hero_line
	print_hero_line_23:
	push	hero_line_23
	jmp	end_print_hero_line
	print_hero_line_24:
	push	hero_line_24
	end_print_hero_line:

	mov	edi, ecx
	mov	eax, 32
	call	add_string_to_buffer
	call	print_line
	mov	ecx, edi
	;-----------------------------------------------------------------------
	mov	esi, [fight_lvl]
	cmp	esi, 10
	 je	length_49
	mov	eax, 32
	jmp	length_32
	length_49:
	mov	eax, 49
	length_32:
	cmp	esi, 10
	 je	print_boss
	;-------------------------------
	cmp	ecx, 1
	 je	print_enemy_line_01
	cmp	ecx, 2
	 je	print_enemy_line_02
	cmp	ecx, 3
	 je	print_enemy_line_03
	cmp	ecx, 4
	 je	print_enemy_line_04
	cmp	ecx, 5
	 je	print_enemy_line_05
	cmp	ecx, 6
	 je	print_enemy_line_06
	cmp	ecx, 7
	 je	print_enemy_line_07
	cmp	ecx, 8
	 je	print_enemy_line_08
	cmp	ecx, 9
	 je	print_enemy_line_09
	cmp	ecx, 10
	 je	print_enemy_line_10
	cmp	ecx, 11
	 je	print_enemy_line_11
	cmp	ecx, 12
	 je	print_enemy_line_12
	cmp	ecx, 13
	 je	print_enemy_line_13
	cmp	ecx, 14
	 je	print_enemy_line_14
	cmp	ecx, 15
	 je	print_enemy_line_15
	cmp	ecx, 16
	 je	print_enemy_line_16
	cmp	ecx, 17
	 je	print_enemy_line_17
	cmp	ecx, 18
	 je	print_enemy_line_18
	cmp	ecx, 19
	 je	print_enemy_line_19
	cmp	ecx, 20
	 je	print_enemy_line_20
	cmp	ecx, 21
	 je	print_enemy_line_21
	cmp	ecx, 22
	 je	print_enemy_line_22
	cmp	ecx, 23
	 je	print_enemy_line_23
	cmp	ecx, 24
	 je	print_enemy_line_24

	print_enemy_line_01:
	push	enemy_line_01
	jmp	end_print_enemy_line
	print_enemy_line_02:
	push	enemy_line_02
	jmp	end_print_enemy_line
	print_enemy_line_03:
	push	enemy_line_03
	jmp	end_print_enemy_line
	print_enemy_line_04:
	push	enemy_line_04
	jmp	end_print_enemy_line
	print_enemy_line_05:
	push	enemy_line_05
	jmp	end_print_enemy_line
	print_enemy_line_06:
	push	enemy_line_06
	jmp	end_print_enemy_line
	print_enemy_line_07:
	push	enemy_line_07
	jmp	end_print_enemy_line
	print_enemy_line_08:
	push	enemy_line_08
	jmp	end_print_enemy_line
	print_enemy_line_09:
	push	enemy_line_09
	jmp	end_print_enemy_line
	print_enemy_line_10:
	push	enemy_line_10
	jmp	end_print_enemy_line
	print_enemy_line_11:
	push	enemy_line_11
	jmp	end_print_enemy_line
	print_enemy_line_12:
	push	enemy_line_12
	jmp	end_print_enemy_line
	print_enemy_line_13:
	push	enemy_line_13
	jmp	end_print_enemy_line
	print_enemy_line_14:
	push	enemy_line_14
	jmp	end_print_enemy_line
	print_enemy_line_15:
	push	enemy_line_15
	jmp	end_print_enemy_line
	print_enemy_line_16:
	push	enemy_line_16
	jmp	end_print_enemy_line
	print_enemy_line_17:
	push	enemy_line_17
	jmp	end_print_enemy_line
	print_enemy_line_18:
	push	enemy_line_18
	jmp	end_print_enemy_line
	print_enemy_line_19:
	push	enemy_line_19
	jmp	end_print_enemy_line
	print_enemy_line_20:
	push	enemy_line_20
	jmp	end_print_enemy_line
	print_enemy_line_21:
	push	enemy_line_21
	jmp	end_print_enemy_line
	print_enemy_line_22:
	push	enemy_line_22
	jmp	end_print_enemy_line
	print_enemy_line_23:
	push	enemy_line_23
	jmp	end_print_enemy_line
	print_enemy_line_24:
	push	enemy_line_24
	end_print_enemy_line:

	jmp	print_enemy
	;-----------------------------------------------------------------------
	print_boss:
	cmp	ecx, 1
	 je	print_boss_line_01
	cmp	ecx, 2
	 je	print_boss_line_02
	cmp	ecx, 3
	 je	print_boss_line_03
	cmp	ecx, 4
	 je	print_boss_line_04
	cmp	ecx, 5
	 je	print_boss_line_05
	cmp	ecx, 6
	 je	print_boss_line_06
	cmp	ecx, 7
	 je	print_boss_line_07
	cmp	ecx, 8
	 je	print_boss_line_08
	cmp	ecx, 9
	 je	print_boss_line_09
	cmp	ecx, 10
	 je	print_boss_line_10
	cmp	ecx, 11
	 je	print_boss_line_11
	cmp	ecx, 12
	 je	print_boss_line_12
	cmp	ecx, 13
	 je	print_boss_line_13
	cmp	ecx, 14
	 je	print_boss_line_14
	cmp	ecx, 15
	 je	print_boss_line_15
	cmp	ecx, 16
	 je	print_boss_line_16
	cmp	ecx, 17
	 je	print_boss_line_17
	cmp	ecx, 18
	 je	print_boss_line_18
	cmp	ecx, 19
	 je	print_boss_line_19
	cmp	ecx, 20
	 je	print_boss_line_20
	cmp	ecx, 21
	 je	print_boss_line_21
	cmp	ecx, 22
	 je	print_boss_line_22
	cmp	ecx, 23
	 je	print_boss_line_23
	cmp	ecx, 24
	 je	print_boss_line_24

	print_boss_line_01:
	push	boss_line_01
	jmp	end_print_boss_line
	print_boss_line_02:
	push	boss_line_02
	jmp	end_print_boss_line
	print_boss_line_03:
	push	boss_line_03
	jmp	end_print_boss_line
	print_boss_line_04:
	push	boss_line_04
	jmp	end_print_boss_line
	print_boss_line_05:
	push	boss_line_05
	jmp	end_print_boss_line
	print_boss_line_06:
	push	boss_line_06
	jmp	end_print_boss_line
	print_boss_line_07:
	push	boss_line_07
	jmp	end_print_boss_line
	print_boss_line_08:
	push	boss_line_08
	jmp	end_print_boss_line
	print_boss_line_09:
	push	boss_line_09
	jmp	end_print_boss_line
	print_boss_line_10:
	push	boss_line_10
	jmp	end_print_boss_line
	print_boss_line_11:
	push	boss_line_11
	jmp	end_print_boss_line
	print_boss_line_12:
	push	boss_line_12
	jmp	end_print_boss_line
	print_boss_line_13:
	push	boss_line_13
	jmp	end_print_boss_line
	print_boss_line_14:
	push	boss_line_14
	jmp	end_print_boss_line
	print_boss_line_15:
	push	boss_line_15
	jmp	end_print_boss_line
	print_boss_line_16:
	push	boss_line_16
	jmp	end_print_boss_line
	print_boss_line_17:
	push	boss_line_17
	jmp	end_print_boss_line
	print_boss_line_18:
	push	boss_line_18
	jmp	end_print_boss_line
	print_boss_line_19:
	push	boss_line_19
	jmp	end_print_boss_line
	print_boss_line_20:
	push	boss_line_20
	jmp	end_print_boss_line
	print_boss_line_21:
	push	boss_line_21
	jmp	end_print_boss_line
	print_boss_line_22:
	push	boss_line_22
	jmp	end_print_boss_line
	print_boss_line_23:
	push	boss_line_23
	jmp	end_print_boss_line
	print_boss_line_24:
	push	boss_line_24
	end_print_boss_line:

	;-----------------------------------------------------------------------
	print_enemy:								;mark for jump without drowing boss
	mov	edi, ecx
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	mov	ecx, edi
	add	ecx, 1
	cmp	ecx, 25
	 jl	init_fight_field_loop

	jmp	start_battle
;-------------------------------------------------------------------------------
print_fight_mode:
	xor	ax, ax
	add	ax, 0
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	mov	ecx, 1
	mov	eax, 42
	print_fight_mode_loop_1:
	pushad
	call	choose_tab_1
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	popad
	add	ecx, 1
	cmp	ecx, 8
	 jl	print_fight_mode_loop_1

	call	print_end_line
	mov	ecx, 9
	print_fight_mode_loop_2:
	pushad
	push	empty_line
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	popad
	add	ecx, 1
	cmp	ecx, 25
	 jl	print_fight_mode_loop_2

	xor	ax, ax
	add	ax, 0
	xor	cx, cx
	add	cx, 9
	call	move_cursor

	xor	eax, eax
	add	eax, 42
	xor	ecx, ecx
	add	ecx, 1
	print_fight_mode_loop_3:

	pushad
	cmp	ecx, 1
	 je	print_mode_01
	cmp	ecx, 2
	 je	print_mode_02
	cmp	ecx, 3
	 je	print_mode_03
	cmp	ecx, 4
	 je	print_mode_04
	cmp	ecx, 5
	 je	print_mode_05
	cmp	ecx, 6
	 je	print_mode_06
	cmp	ecx, 7
	 je	print_mode_07
	cmp	ecx, 8
	 je	print_mode_08
	cmp	ecx, 9
	 je	print_mode_09
	cmp	ecx, 10
	 je	print_mode_10
	cmp	ecx, 11
	 je	print_mode_11

	push	mode_line_12
	jmp	end_print_mode
	print_mode_01:
	push	mode_line_01
	jmp	end_print_mode
	print_mode_02:
	push	mode_line_02
	jmp	end_print_mode
	print_mode_03:
	push	mode_line_03
	jmp	end_print_mode
	print_mode_04:
	push	mode_line_04
	jmp	end_print_mode
	print_mode_05:
	push	mode_line_05
	jmp	end_print_mode
	print_mode_06:
	push	mode_line_06
	jmp	end_print_mode
	print_mode_07:
	push	mode_line_07
	jmp	end_print_mode
	print_mode_08:
	push	mode_line_08
	jmp	end_print_mode
	print_mode_09:
	push	mode_line_09
	jmp	end_print_mode
	print_mode_10:
	push	mode_line_10
	jmp	end_print_mode
	print_mode_11:
	push	mode_line_11

	end_print_mode:
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	popad
	pushad
	cmp	ecx, 11
	 je	call_print_end_line_in_mode
	call_print_end_line_in_mode_back:
	popad
	add	ecx, 1
	cmp	ecx, 13
	 jl	print_fight_mode_loop_3
	ret

call_print_end_line_in_mode:
	call	print_end_line
jmp	call_print_end_line_in_mode_back
;-------------------------------------------------------------------------------
stat_window_init:
	xor	ax, ax
	add	ax, 0
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	mov	ecx, 1
	mov	eax, 42
	stat_window_loop_1:
	pushad
	call	choose_tab_2
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	popad
	add	ecx, 1
	cmp	ecx, 7
	 jl	stat_window_loop_1

	stat_window_loop_2:
	pushad
	push	empty_line
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	popad
	add	ecx, 1
	cmp	ecx, 25
	 jl	stat_window_loop_2

	xor	ax, ax
	add	ax, 0
	xor	cx, cx
	add	cx, 8
	call	move_cursor

	mov	ecx, 1
	stat_window_loop_3:
	pushad
	cmp	ecx, 1
	 je	print_stat_1
	cmp	ecx, 2
	 je	print_stat_2
	cmp	ecx, 3
	 je	print_stat_3
	cmp	ecx, 4
	 je	print_stat_4
	cmp	ecx, 5
	 je	print_stat_5
	cmp	ecx, 6
	 je	print_stat_6

	push	stat_need_exp
	jmp	end_print_stat
	print_stat_1:
	push	stat_atk_line
	jmp	end_print_stat
	print_stat_2:
	push	stat_def_line
	jmp	end_print_stat
	print_stat_3:
	push	stat_sta_line
	jmp	end_print_stat
	print_stat_4:
	push	stat_acc_line
	jmp	end_print_stat
	print_stat_5:
	push	stat_dex_line
	jmp	end_print_stat
	print_stat_6:
	push	stat_cur_exp

	end_print_stat:
	call	add_string_to_buffer
	call	print_line

	popad
	pushad

	cmp	ecx, 1
	 je	print_stat_01
	cmp	ecx, 2
	 je	print_stat_02
	cmp	ecx, 3
	 je	print_stat_03
	cmp	ecx, 4
	 je	print_stat_04
	cmp	ecx, 5
	 je	print_stat_05
	cmp	ecx, 6
	 je	print_stat_06

	mov	esi, [need_exp_to_lvl]
	jmp	end_print_stat_num
	print_stat_01:
	mov	esi, [stat_atk]
	jmp	end_print_stat_num
	print_stat_02:
	mov	esi, [stat_def]
	jmp	end_print_stat_num
	print_stat_03:
	mov	esi, [stat_sta]
	jmp	end_print_stat_num
	print_stat_04:
	mov	esi, [stat_acc]
	jmp	end_print_stat_num
	print_stat_05:
	mov	esi, [stat_dex]
	jmp	end_print_stat_num
	print_stat_06:
	mov	esi, [cur_exp]

	end_print_stat_num:
	pushad
	call	clear_buffer
	popad
	pushad
	push	esi
	call	add_num_to_buffer
	popad
	pushad
	mov	eax, 9
	call	print_line
	call	print_end_line
	popad
	add	ecx, 1
	cmp	ecx, 8
	 jl	stat_window_loop_3

	call	print_end_line

	xor	eax, eax
	add	eax, 42
	push	help_line_8
	call	add_string_to_buffer
	call	print_line

	jmp	stat_window_loop;
;-------------------------------------------------------------------------------
stat_window_loop:
	push	10
	call	[__imp__Sleep@4]
	xor	eax, eax

	push	1Bh								;compare on press Esc
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	stat_exit

	jmp	stat_window_loop
stat_exit:
	call	init_main_window
	jmp	main_window_loop
;-------------------------------------------------------------------------------
help_window_init:
	xor	ax, ax
	add	ax, 0
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	mov	eax, 42
	mov	ecx, 1
help_window_init_loop:
	pushad
	cmp	ecx, 1
	 je	help_str_line_1
	cmp	ecx, 2
	 je	help_str_line_2
	cmp	ecx, 3
	 je	help_str_line_3
	cmp	ecx, 4
	 je	help_str_line_empty
	cmp	ecx, 5
	 je	help_str_line_4
	cmp	ecx, 6
	 je	help_str_line_5
	cmp	ecx, 7
	 je	help_str_line_empty
	cmp	ecx, 8
	 je	help_str_line_6
	cmp	ecx, 9
	 je	help_str_line_7
	cmp	ecx, 10
	 je	help_str_line_empty
	cmp	ecx, 11
	 je	help_str_line_8
	cmp	ecx, 12
	 jg	help_str_line_empty

	push	help_line_9
	jmp	help_str_chosen
	help_str_line_1:
	push	help_line_1
	jmp	help_str_chosen
	help_str_line_2:
	push	help_line_2
	jmp	help_str_chosen
	help_str_line_3:
	push	help_line_3
	jmp	help_str_chosen
	help_str_line_4:
	push	help_line_4
	jmp	help_str_chosen
	help_str_line_5:
	push	help_line_5
	jmp	help_str_chosen
	help_str_line_6:
	push	help_line_6
	jmp	help_str_chosen
	help_str_line_7:
	push	help_line_7
	jmp	help_str_chosen
	help_str_line_8:
	push	help_line_8
	jmp	help_str_chosen
	help_str_line_empty:
	push	empty_line

	help_str_chosen:
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	popad
	add	ecx, 1
	cmp	ecx, 25
	 jl	help_window_init_loop

	jmp	help_window_loop
;-------------------------------------------------------------------------------
help_window_loop:
	push	10
	call	[__imp__Sleep@4]
	xor	eax, eax

	push	1Bh								;compare on press Esc
	call	[__imp__GetAsyncKeyState@4]
	cmp	eax, 4294934529
	je	help_exit

	jmp	help_window_loop
help_exit:
	call	init_main_window
	jmp	main_window_loop
;-------------------------------------------------------------------------------
init_main_window:
	xor	ax, ax
	add	ax, 0
	xor	cx, cx
	add	cx, 0
	call	move_cursor

	mov	ecx, 1
	mov	eax, 42
	init_main_window_loop_1:
	pushad
	call	choose_tab_1
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	popad
	add	ecx, 1
	cmp	ecx, 9
	 jl	init_main_window_loop_1

	push	empty_line
	call	add_string_to_buffer
	call	print_line
	call	print_end_line

	mov	ecx, 1
	mov	eax, 42
	init_main_window_loop_2:
	pushad
	call	choose_tab_2
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	popad
	add	ecx, 1
	cmp	ecx, 7
	 jl	init_main_window_loop_2

	push	empty_line
	call	add_string_to_buffer
	call	print_line
	call	print_end_line

	mov	ecx, 1
	mov	eax, 42
	init_main_window_loop_3:
	pushad
	call	choose_tab_3
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	popad
	add	ecx, 1
	cmp	ecx, 7
	 jl	init_main_window_loop_3

	push	empty_line
	call	add_string_to_buffer
	call	print_line
	call	print_end_line

	push	help_line
	call	add_string_to_buffer
	call	print_line
	call	print_end_line
	ret
;-------------------------------------------------------------------------------
choose_tab_1:
	pop	esi
	cmp	ecx, 1
	 je	push_fight_line_1
	cmp	ecx, 2
	 je	push_fight_line_2
	cmp	ecx, 3
	 je	push_fight_line_3
	cmp	ecx, 4
	 je	push_fight_line_4
	cmp	ecx, 5
	 je	push_fight_line_5
	cmp	ecx, 6
	 je	push_fight_line_6
	cmp	ecx, 7
	 je	push_fight_line_7

	push	fight_line_8
	push	esi
	ret
	push_fight_line_1:
	push	fight_line_1
	push	esi
	ret
	push_fight_line_2:
	push	fight_line_2
	push	esi
	ret
	push_fight_line_3:
	push	fight_line_3
	push	esi
	ret
	push_fight_line_4:
	push	fight_line_4
	push	esi
	ret
	push_fight_line_5:
	push	fight_line_5
	push	esi
	ret
	push_fight_line_6:
	push	fight_line_6
	push	esi
	ret
	push_fight_line_7:
	push	fight_line_7
	push	esi
	ret
;-------------------------------------------------------------------------------
choose_tab_2:
	pop	esi
	cmp	ecx, 1
	 je	push_stat_line_1
	cmp	ecx, 2
	 je	push_stat_line_2
	cmp	ecx, 3
	 je	push_stat_line_3
	cmp	ecx, 4
	 je	push_stat_line_4
	cmp	ecx, 5
	 je	push_stat_line_5

	push	stat_line_6
	push	esi
	ret
	push_stat_line_1:
	push	stat_line_1
	push	esi
	ret
	push_stat_line_2:
	push	stat_line_2
	push	esi
	ret
	push_stat_line_3:
	push	stat_line_3
	push	esi
	ret
	push_stat_line_4:
	push	stat_line_4
	push	esi
	ret
	push_stat_line_5:
	push	stat_line_5
	push	esi
	ret
;-------------------------------------------------------------------------------
choose_tab_3:
	pop	esi
	cmp	ecx, 1
	 je	push_exit_line_1
	cmp	ecx, 2
	 je	push_exit_line_2
	cmp	ecx, 3
	 je	push_exit_line_3
	cmp	ecx, 4
	 je	push_exit_line_4
	cmp	ecx, 5
	 je	push_exit_line_5

	push	exit_line_6
	push	esi
	ret
	push_exit_line_1:
	push	exit_line_1
	push	esi
	ret
	push_exit_line_2:
	push	exit_line_2
	push	esi
	ret
	push_exit_line_3:
	push	exit_line_3
	push	esi
	ret
	push_exit_line_4:
	push	exit_line_4
	push	esi
	ret
	push_exit_line_5:
	push	exit_line_5
	push	esi
	ret
;-------------------------------------------------------------------------------
rand_percent:
	rdtsc									;stomp of time in EDX:EAX
	xor	ebx, ebx
	xor	edx, edx
	add	ebx, 100
	idiv	bx
ret
;-------------------------------------------------------------------------------
move_cursor:
	mov	[console_coord], ax						;ax = X coord
	mov	[console_coord + 2], cx						;cx = Y coord
	push	dword [console_coord]
	push	dword [stdout]
	call	[__imp__SetConsoleCursorPosition@8]
	ret
;-------------------------------------------------------------------------------
clear_buffer:
	pop	esi								;ret in stack
	push	empty_line_9
	push	sformat
	push	buffer
	call	[__imp__wsprintfA]
	add	esp, 12
	push	esi
	ret
;-------------------------------------------------------------------------------
add_string_to_buffer:
	pop	esi								;ret in stack
	push	sformat
	push	buffer
	call	[__imp__wsprintfA]
	add	esp, 12
	push	esi
	ret
;-------------------------------------------------------------------------------
add_num_to_buffer:
	pop	esi								;ret in stack
	push	iformat
	push	buffer
	call	[__imp__wsprintfA]
	add	esp, 12
	push	esi
	ret
;-------------------------------------------------------------------------------
;example
;	xor	eax, eax
;	add	eax, 40
;	push	line
;	call	add_string_to_buffer
;	call	print_line
;-------------------------------------------------------------------------------
print_line:
	push	dword 0
	push	written
	push	dword eax							;eax contain number of char
	push	buffer
	push	dword[stdout]
	call	[__imp__WriteConsoleA@20]
	ret
;-------------------------------------------------------------------------------
print_end_line:
	push	dword 0
	push	written
	push	dword 2
	push	end_line
	push	dword[stdout]
	call	[__imp__WriteConsoleA@20]
	ret
;-------------------------------------------------------------------------------
exit:
	push	0
	call	[__imp__ExitProcess@4]
end


;=======================SECTION RDATA===========================================
section .rdata

fight_line_1	db "         ______ _       _     _           ", 0
fight_line_2	db "        |  ____(_)     | |   | |          ", 0
fight_line_3	db "        | |__   _  __ _| |__ | |_         ", 0
fight_line_4	db "        |  __| | |/ _` | '_ \| __|        ", 0
fight_line_5	db "        | |    | | (_| | | | | |_         ", 0
fight_line_6	db "        |_|    |_|\__, |_| |_|\__|        ", 0
fight_line_7	db "                   __/ |                  ", 0
fight_line_8	db "                  |___/                   ", 0

stat_line_1	db "  _____ _        _   _     _   _          ", 0
stat_line_2	db " / ____| |      | | (_)   | | (_)         ", 0
stat_line_3	db "| (___ | |_ __ _| |_ _ ___| |_ _  ___ ___ ", 0
stat_line_4	db " \___ \| __/ _` | __| / __| __| |/ __/ __|", 0
stat_line_5	db " ____) | || (_| | |_| \__ \ |_| | (__\__ \", 0
stat_line_6	db "|_____/ \__\__,_|\__|_|___/\__|_|\___|___/", 0

exit_line_1	db "            ______       _ _              ", 0
exit_line_2	db "           |  ____|     (_) |             ", 0
exit_line_3	db "           | |__  __  __| | |_            ", 0
exit_line_4	db "           |  __| \ \/ /| | __|           ", 0
exit_line_5	db "           | |____ >  < | | |_            ", 0
exit_line_6	db "           |______/_/\_\|_|\__|           ", 0

help_line	db "Press H to open HELP window               ", 0

help_line_1	db "At the start, you have a hero with startup", 0
help_line_2	db "features, that you may look at Statistics ", 0
help_line_3	db "(Press S at Main Window (MainW at future))", 0
help_line_4	db "When you are ready to fight with computer ", 0
help_line_5	db "go to the tab 'Fight' (Press F at MainW)  ", 0
help_line_6	db "Anyway, if you are tired about that game, ", 0
help_line_7	db "you can leave it(Press E at MainW to Exit)", 0
help_line_9	db "If you want RUN from battlefield - press Q", 0
help_line_8	db "If you want to open Main Window, press Esc", 0

lvl_up_line_1	db "Congratulation! Choose a skill to upgrade ", 0
lvl_up_line_2	db "1)Atack 2)Defence 3)Stamina 4)Crit 5)Dodge", 0

mode_line_01	db "Choose difficult for your next fight:     ", 0
mode_line_02	db "1) Nooby                                  ", 0
mode_line_03	db "2) Novice                                 ", 0
mode_line_04	db "3) Padavan                                ", 0
mode_line_05	db "4) Apprentice                             ", 0
mode_line_06	db "5) Adept                                  ", 0
mode_line_07	db "6) Expert                                 ", 0
mode_line_08	db "7) Pro                                    ", 0
mode_line_09	db "8) Master                                 ", 0
mode_line_10	db "9) Grand-Master                           ", 0
mode_line_11	db "0) Boss Level                             ", 0
mode_line_12	db "If you aren't ready to fight, press Esc!  ", 0

empty_line	db "                                          ", 0		;42 char
empty_line_39	db "                                       ", 0			;39 char
empty_line_9	db "         ", 0						;9 char

enemy_line_01	db "                              ", 0
enemy_line_02	db "                              ", 0
enemy_line_03	db "                              ", 0
enemy_line_04	db "                     __       ", 0
enemy_line_05	db "                    /  \      ", 0
enemy_line_06	db "                  _/=Ll=\_    ", 0
enemy_line_07	db " |\              [________]   ", 0
enemy_line_08	db "  \\              ||/''\||    ", 0
enemy_line_09	db "   \\             ( 0..0 )    ", 0
enemy_line_10	db "    \\             \_--_/     ", 0
enemy_line_11	db "     \\       __.-[\!--!/]-.  ", 0
enemy_line_12	db "      \\  _.-'    \      /  \ ", 0
enemy_line_13	db "       \\-|   __.-|'----' ,_ \", 0
enemy_line_14	db "      ofset~''    |      |/  /", 0
enemy_line_15	db "         rr       >==[]==<  / ", 0
enemy_line_16	db "          r'     /__.''.__\/  ", 0
enemy_line_17	db "                  |  __  |    ", 0
enemy_line_18	db "                  |  ||  |    ", 0
enemy_line_19	db "                  |  ||  |    ", 0
enemy_line_20	db "                  |  ||  |    ", 0
enemy_line_21	db "                  |__||__|    ", 0
enemy_line_22	db "                  [__][__]    ", 0
enemy_line_23	db "                  |_ || _|    ", 0
enemy_line_24	db "                  (__)(__)    ", 0				;32 char

hero_line_01	db "                              ", 0
hero_line_02	db "                              ", 0
hero_line_03	db "                              ", 0
hero_line_04	db "       __                     ", 0
hero_line_05	db "      /  \                    ", 0
hero_line_06	db "    _/=Ll=\_                  ", 0
hero_line_07	db "   [________]              /| ", 0
hero_line_08	db "    ||/''\||              //  ", 0
hero_line_09	db "    ( 0..0 )             //   ", 0
hero_line_10	db "     \_--_/             //    ", 0
hero_line_11	db "  .-[\!--!/]-.__       //     ", 0
hero_line_12	db " /  \      /    '-._  //      ", 0
hero_line_13	db "/ _, '----'|-.__  | -//       ", 0
hero_line_14	db "\  \|      |    ''~te3to      ", 0
hero_line_15	db " \  >==[]==<       rr         ", 0
hero_line_16	db "  \/__.''.__\     'r          ", 0
hero_line_17	db "    |  __  |                  ", 0
hero_line_18	db "    |  ||  |                  ", 0
hero_line_19	db "    |  ||  |                  ", 0
hero_line_20	db "    |  ||  |                  ", 0
hero_line_21	db "    |__||__|                  ", 0
hero_line_22	db "    [__][__]                  ", 0
hero_line_23	db "    |_ || _|                  ", 0
hero_line_24	db "    (__)(__)                  ", 0				;32 char


boss_line_01	db "      \                       /                ", 0
boss_line_02	db "      |\   \        /        /|                ", 0
boss_line_03	db "     /  \  |\__  __/|       /  \               ", 0
boss_line_04	db "    / /\ \ \ _ \/ _ /      /  ^ \              ", 0
boss_line_05	db "   / / /\ \ (*}\/{*)      /  / \ \             ", 0
boss_line_06	db "   | | | ) \( (oo) )     /  // |\ \            ", 0
boss_line_07	db "   | | | |\ \(V''V)\    /  / | || \|           ", 0
boss_line_08	db "   | | | | \ |^__^| \  /  / || || ||           ", 0
boss_line_09	db "  / / /  | |\ WWWW__ \/  /| || || ||           ", 0
boss_line_10	db " | | | | | | \_______\  / / || || ||           ", 0
boss_line_11	db " | | | / | | )|______\ ) | / | || ||           ", 0
boss_line_12	db " / / /  / /  /______/   /| \ \ || ||           ", 0
boss_line_13	db "/ / /  / /  /\_____/  |/ /__\ \ \ \ \          ", 0
boss_line_14	db "| | | / /  /\______/    \   \__| \ \ \         ", 0
boss_line_15	db "| | | | | |\______ __    \_    \__|_| \        ", 0
boss_line_16	db "| | |___ /\______ /  \     \_       \  |       ", 0
boss_line_17	db "| |/    /\_______/    \      \__     \ |    /\ ", 0
boss_line_18	db "|/ |   |\_______|      |        \___  \ |__/  \", 0
boss_line_19	db "/  |   |\_______|      |            \___/     |", 0
boss_line_20	db "   |   |\_______|      |                    __/", 0
boss_line_21	db "    \   \________\_    _\               ____/  ", 0
boss_line_22	db "  __/   /\________/   /   )\__      _____/     ", 0
boss_line_23	db " /  __ /  \uuuu/  __ /___]    \______/         ", 0
boss_line_24	db " VVV  V        VVV  V                          ", 0		;49 char

stat_atk_line	db "1) Atack:     ", 0						;14 char
stat_def_line	db "2) Defence:   ", 0
stat_sta_line	db "3) Stamina:   ", 0
stat_acc_line	db "4) Accuracy:  ", 0
stat_dex_line	db "5) Dexterity: ", 0

stat_cur_exp	db "Your curent experience is: ", 0				;27 char
stat_need_exp	db "Experience border for Level Up: ", 0			;32 char
stat_crit	db "Your chance to crit is: ", 0				;24 char
stat_dodge	db "Your chance to dodge is: ", 0				;25 char

slash		db "/", 0
iformat		db "%i", 0
sformat		db "%s", 0
end_line	db 0Dh, 0Ah, 0							;\r + \n

battle_line_1	db "CRIT!", 0
battle_line_2	db "Dodge", 0
battle_line_3	db "Ouch.", 0
battle_line_4	db "MISS!", 0
battle_line_5	db "     ", 0

game_over_line_1	db "Sorry, but you have been slain.", 0			;31 char
game_over_line_2	db "Press 'Esc' to exit the game.", 0			;29 char